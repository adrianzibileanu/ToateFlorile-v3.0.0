import { Directive, Optional, Input, NgModule, Host, Inject, Output, EventEmitter } from '@angular/core';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { IgxColumnComponent } from './columns/column.component';
import { IgxColumnGroupComponent } from './columns/column-group.component';
import { GridColumnDataType } from '../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand, IgxDateTimeFilteringOperand } from '../data-operations/filtering-condition';
import { IgxGridComponent } from './grid/grid.component';
import { IGX_GRID_BASE } from './common/grid.interface';
import { IgxPivotGridComponent } from './pivot-grid/pivot-grid.component';
import { PivotUtil } from './pivot-grid/pivot-util';
import { IgxPivotDateDimension } from './pivot-grid/pivot-grid-dimensions';
import { cloneArray, cloneValue } from '../core/utils';
import * as i0 from "@angular/core";
export class IgxGridStateDirective {
    /**
     * @hidden
     */
    constructor(grid, resolver, viewRef) {
        this.grid = grid;
        this.resolver = resolver;
        this.viewRef = viewRef;
        this.featureKeys = [];
        this._options = {
            columns: true,
            filtering: true,
            advancedFiltering: true,
            sorting: true,
            groupBy: true,
            paging: true,
            cellSelection: true,
            rowSelection: true,
            columnSelection: true,
            rowPinning: true,
            expansion: true,
            moving: true,
            rowIslands: true,
            pivotConfiguration: true
        };
        this.FEATURES = {
            sorting: {
                getFeatureState: (context) => {
                    const sortingState = context.currGrid.sortingExpressions;
                    sortingState.forEach(s => {
                        delete s.strategy;
                        delete s.owner;
                    });
                    return { sorting: sortingState };
                },
                restoreFeatureState: (context, state) => {
                    context.currGrid.sortingExpressions = state;
                }
            },
            filtering: {
                getFeatureState: (context) => {
                    const filteringState = context.currGrid.filteringExpressionsTree;
                    if (filteringState) {
                        delete filteringState.owner;
                        for (const item of filteringState.filteringOperands) {
                            delete item.owner;
                        }
                    }
                    return { filtering: filteringState };
                },
                restoreFeatureState: (context, state) => {
                    const filterTree = context.createExpressionsTreeFromObject(state);
                    context.currGrid.filteringExpressionsTree = filterTree;
                }
            },
            advancedFiltering: {
                getFeatureState: (context) => {
                    const filteringState = context.currGrid.advancedFilteringExpressionsTree;
                    let advancedFiltering;
                    if (filteringState) {
                        delete filteringState.owner;
                        for (const item of filteringState.filteringOperands) {
                            delete item.owner;
                        }
                        advancedFiltering = filteringState;
                    }
                    else {
                        advancedFiltering = {};
                    }
                    return { advancedFiltering };
                },
                restoreFeatureState: (context, state) => {
                    const filterTree = context.createExpressionsTreeFromObject(state);
                    context.currGrid.advancedFilteringExpressionsTree = filterTree;
                }
            },
            columns: {
                getFeatureState: (context) => {
                    const gridColumns = context.currGrid.columns.map((c) => ({
                        pinned: c.pinned,
                        sortable: c.sortable,
                        filterable: c.filterable,
                        editable: c.editable,
                        sortingIgnoreCase: c.sortingIgnoreCase,
                        filteringIgnoreCase: c.filteringIgnoreCase,
                        headerClasses: c.headerClasses,
                        headerGroupClasses: c.headerGroupClasses,
                        maxWidth: c.maxWidth,
                        groupable: c.groupable,
                        movable: c.movable,
                        hidden: c.hidden,
                        dataType: c.dataType,
                        hasSummary: c.hasSummary,
                        field: c.field,
                        width: c.width,
                        header: c.header,
                        resizable: c.resizable,
                        searchable: c.searchable,
                        selectable: c.selectable,
                        parent: c.parent ? c.parent.header : null,
                        columnGroup: c.columnGroup,
                        disableHiding: c.disableHiding
                    }));
                    return { columns: gridColumns };
                },
                restoreFeatureState: (context, state) => {
                    const newColumns = [];
                    const factory = context.resolver.resolveComponentFactory(IgxColumnComponent);
                    const groupFactory = context.resolver.resolveComponentFactory(IgxColumnGroupComponent);
                    state.forEach((colState) => {
                        const hasColumnGroup = colState.columnGroup;
                        delete colState.columnGroup;
                        if (hasColumnGroup) {
                            const ref1 = groupFactory.create(context.viewRef.injector);
                            Object.assign(ref1.instance, colState);
                            ref1.instance.grid = context.currGrid;
                            if (ref1.instance.parent) {
                                const columnGroup = newColumns.find(e => e.header === ref1.instance.parent);
                                columnGroup.children.reset([...columnGroup.children.toArray(), ref1.instance]);
                                ref1.instance.parent = columnGroup;
                            }
                            ref1.changeDetectorRef.detectChanges();
                            newColumns.push(ref1.instance);
                        }
                        else {
                            const ref = factory.create(context.viewRef.injector);
                            Object.assign(ref.instance, colState);
                            ref.instance.grid = context.currGrid;
                            if (ref.instance.parent) {
                                const columnGroup = newColumns.find(e => e.header === ref.instance.parent);
                                if (columnGroup) {
                                    ref.instance.parent = columnGroup;
                                    columnGroup.children.reset([...columnGroup.children.toArray(), ref.instance]);
                                }
                            }
                            ref.changeDetectorRef.detectChanges();
                            newColumns.push(ref.instance);
                        }
                    });
                    context.currGrid.updateColumns(newColumns);
                    newColumns.forEach(col => {
                        context.currGrid.columnInit.emit(col);
                    });
                }
            },
            groupBy: {
                getFeatureState: (context) => {
                    const grid = context.currGrid;
                    const groupingExpressions = grid.groupingExpressions;
                    groupingExpressions.forEach(expr => {
                        delete expr.strategy;
                    });
                    const expansionState = grid.groupingExpansionState;
                    const groupsExpanded = grid.groupsExpanded;
                    return { groupBy: { expressions: groupingExpressions, expansion: expansionState, defaultExpanded: groupsExpanded } };
                },
                restoreFeatureState: (context, state) => {
                    const grid = context.currGrid;
                    grid.groupingExpressions = state.expressions;
                    if (grid.groupsExpanded !== state.defaultExpanded) {
                        grid.toggleAllGroupRows();
                    }
                    else {
                        grid.groupingExpansionState = state.expansion;
                    }
                }
            },
            paging: {
                getFeatureState: (context) => {
                    const pagingState = context.currGrid.pagingState;
                    return { paging: pagingState };
                },
                restoreFeatureState: (context, state) => {
                    if (!context.currGrid.paginator) {
                        return;
                    }
                    if (context.currGrid.paginator.perPage !== state.recordsPerPage) {
                        context.currGrid.paginator.perPage = state.recordsPerPage;
                        context.currGrid.cdr.detectChanges();
                    }
                    context.currGrid.paginator.page = state.index;
                }
            },
            moving: {
                getFeatureState: (context) => {
                    return { moving: context.currGrid.moving };
                },
                restoreFeatureState: (context, state) => {
                    context.currGrid.moving = state;
                }
            },
            rowSelection: {
                getFeatureState: (context) => {
                    const selection = context.currGrid.selectionService.getSelectedRows();
                    return { rowSelection: selection };
                },
                restoreFeatureState: (context, state) => {
                    context.currGrid.selectRows(state, true);
                }
            },
            cellSelection: {
                getFeatureState: (context) => {
                    const selection = context.currGrid.getSelectedRanges().map(range => ({ rowStart: range.rowStart, rowEnd: range.rowEnd, columnStart: range.columnStart, columnEnd: range.columnEnd }));
                    return { cellSelection: selection };
                },
                restoreFeatureState: (context, state) => {
                    state.forEach(r => {
                        const range = { rowStart: r.rowStart, rowEnd: r.rowEnd, columnStart: r.columnStart, columnEnd: r.columnEnd };
                        context.currGrid.selectRange(range);
                    });
                }
            },
            columnSelection: {
                getFeatureState: (context) => {
                    const selection = context.currGrid.selectedColumns().map(c => c.field);
                    return { columnSelection: selection };
                },
                restoreFeatureState: (context, state) => {
                    context.currGrid.deselectAllColumns();
                    context.currGrid.selectColumns(state);
                }
            },
            rowPinning: {
                getFeatureState: (context) => {
                    const pinned = context.currGrid.pinnedRows?.map(x => x.key);
                    return { rowPinning: pinned };
                },
                restoreFeatureState: (context, state) => {
                    // clear current state.
                    context.currGrid.pinnedRows.forEach(row => row.unpin());
                    state.forEach(rowID => context.currGrid.pinRow(rowID));
                }
            },
            pinningConfig: {
                getFeatureState: (context) => ({ pinningConfig: context.currGrid.pinning }),
                restoreFeatureState: (context, state) => {
                    context.currGrid.pinning = state;
                }
            },
            expansion: {
                getFeatureState: (context) => {
                    const expansionStates = Array.from(context.currGrid.expansionStates);
                    return { expansion: expansionStates };
                },
                restoreFeatureState: (context, state) => {
                    const expansionStates = new Map(state);
                    context.currGrid.expansionStates = expansionStates;
                }
            },
            rowIslands: {
                getFeatureState(context) {
                    const childGridStates = [];
                    const rowIslands = context.currGrid.allLayoutList;
                    if (rowIslands) {
                        rowIslands.forEach(rowIsland => {
                            const childGrids = rowIsland.rowIslandAPI.getChildGrids();
                            childGrids.forEach(chGrid => {
                                const parentRowID = this.getParentRowID(chGrid);
                                context.currGrid = chGrid;
                                if (context.currGrid) {
                                    const childGridState = context.buildState(context.featureKeys);
                                    childGridStates.push({ id: `${rowIsland.id}`, parentRowID, state: childGridState });
                                }
                            });
                        });
                    }
                    context.currGrid = context.grid;
                    return { rowIslands: childGridStates };
                },
                restoreFeatureState(context, state) {
                    const rowIslands = context.currGrid.allLayoutList;
                    if (rowIslands) {
                        rowIslands.forEach(rowIsland => {
                            const childGrids = rowIsland.rowIslandAPI.getChildGrids();
                            childGrids.forEach(chGrid => {
                                const parentRowID = this.getParentRowID(chGrid);
                                context.currGrid = chGrid;
                                const childGridState = state.find(st => st.id === rowIsland.id && st.parentRowID === parentRowID);
                                if (childGridState && context.currGrid) {
                                    context.restoreGridState(childGridState.state, context.featureKeys);
                                }
                            });
                        });
                    }
                    context.currGrid = context.grid;
                },
                /**
                 * Traverses the hierarchy up to the root grid to return the ID of the expanded row.
                 */
                getParentRowID: (grid) => {
                    let childGrid;
                    while (grid.parent) {
                        childGrid = grid;
                        grid = grid.parent;
                    }
                    return grid.gridAPI.getParentRowId(childGrid);
                }
            },
            pivotConfiguration: {
                getFeatureState(context) {
                    const config = context.currGrid.pivotConfiguration;
                    if (!config || !(context.currGrid instanceof IgxPivotGridComponent)) {
                        return { pivotConfiguration: undefined };
                    }
                    const configCopy = cloneValue(config);
                    configCopy.rows = cloneArray(config.rows, true);
                    configCopy.columns = cloneArray(config.columns, true);
                    configCopy.filters = cloneArray(config.filters, true);
                    const dims = [...(configCopy.rows || []), ...(configCopy.columns || []), ...(configCopy.filters || [])];
                    const dateDimensions = dims.filter(x => context.isDateDimension(x));
                    dateDimensions?.forEach(dim => {
                        // do not serialize the grid resource strings. This would pollute the object with unnecessary data.
                        dim.resourceStrings = {};
                    });
                    return { pivotConfiguration: configCopy };
                },
                restoreFeatureState(context, state) {
                    const config = state;
                    if (!config || !(context.currGrid instanceof IgxPivotGridComponent)) {
                        return;
                    }
                    context.restoreValues(config, context.currGrid);
                    context.restoreDimensions(config, context.currGrid);
                    context.currGrid.pivotConfiguration = config;
                },
            }
        };
        /**
         *  Event emitted when set state is called with a string.
         * Returns the parsed state object so that it can be further modified before applying to the grid.
         * ```typescript
         * this.state.stateParsed.subscribe(parsedState => parsedState.sorting.forEach(x => x.strategy = NoopSortingStrategy.instance()});
         * ```
         */
        this.stateParsed = new EventEmitter();
    }
    /**
     *  An object with options determining if a certain feature state should be saved.
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * public options = {selection: false, advancedFiltering: false};
     * ```
     */
    get options() {
        return this._options;
    }
    set options(value) {
        Object.assign(this._options, value);
        if (!(this.grid instanceof IgxGridComponent)) {
            delete this._options.groupBy;
        }
        else {
            delete this._options.rowIslands;
        }
    }
    /**
     * Gets the state of a feature or states of all grid features, unless a certain feature is disabled through the `options` property.
     *
     * @param `serialize` determines whether the returned object will be serialized to JSON string. Default value is true.
     * @param `feature` string or array of strings determining the features to be added in the state. If skipped, all features are added.
     * @returns Returns the serialized to JSON string IGridState object, or the non-serialized IGridState object.
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * let state = this.state.getState(); // returns string
     * let state = this.state(false) // returns `IGridState` object
     * ```
     */
    getState(serialize = true, features) {
        let state;
        this.currGrid = this.grid;
        this.state = state = this.buildState(features);
        if (serialize) {
            state = JSON.stringify(state, this.stringifyCallback);
        }
        return state;
    }
    /**
     * Restores grid features' state based on the IGridState object passed as an argument.
     *
     * @param IGridState object to restore state from.
     * @returns
     * ```html
     * <igx-grid [igxGridState]="options"></igx-grid>
     * ```
     * ```typescript
     * @ViewChild(IgxGridStateDirective, { static: true }) public state;
     * this.state.setState(gridState);
     * ```
     */
    setState(state, features) {
        if (typeof state === 'string') {
            state = JSON.parse(state);
            this.stateParsed.emit(state);
        }
        this.state = state;
        this.currGrid = this.grid;
        this.restoreGridState(state, features);
        this.grid.cdr.detectChanges(); // TODO
    }
    /**
     * Builds an IGridState object.
     */
    buildState(keys) {
        this.applyFeatures(keys);
        let gridState = {};
        this.featureKeys.forEach(f => {
            if (this.options[f]) {
                if (!(this.grid instanceof IgxGridComponent) && f === 'groupBy') {
                    return;
                }
                const feature = this.getFeature(f);
                const featureState = feature.getFeatureState(this);
                gridState = Object.assign(gridState, featureState);
            }
        });
        return gridState;
    }
    /**
     * The method that calls corresponding methods to restore features from the passed IGridState object.
     */
    restoreGridState(state, features) {
        this.applyFeatures(features);
        this.restoreFeatures(state);
    }
    restoreFeatures(state) {
        this.featureKeys.forEach(f => {
            if (this.options[f]) {
                const featureState = state[f];
                if (f === 'moving' || featureState) {
                    const feature = this.getFeature(f);
                    feature.restoreFeatureState(this, featureState);
                }
            }
        });
    }
    /**
     * Returns a collection of all grid features.
     */
    applyFeatures(keys) {
        this.featureKeys = [];
        if (!keys) {
            for (const key of Object.keys(this.options)) {
                this.featureKeys.push(key);
            }
        }
        else if (Array.isArray(keys)) {
            this.featureKeys = [...keys];
        }
        else {
            this.featureKeys.push(keys);
        }
    }
    /**
     * This method restores complex objects in the pivot dimensions
     * Like the IgxPivotDateDimension and filters.
     */
    restoreDimensions(config, grid) {
        const collections = [config.rows, config.columns, config.filters];
        for (const collection of collections) {
            for (let index = 0; index < collection?.length; index++) {
                const dim = collection[index];
                if (this.isDateDimension(dim)) {
                    this.restoreDateDimension(dim);
                }
                // restore complex filters
                if (dim.filter) {
                    dim.filter = this.createExpressionsTreeFromObject(dim.filter);
                }
            }
        }
    }
    /**
     * This method restores the IgxPivotDateDimension with its default functions and resource strings.
     */
    restoreDateDimension(dim) {
        const dateDim = new IgxPivotDateDimension(dim.inBaseDimension, dim.inOptions);
        // restore functions and resource strings
        dim.resourceStrings = dateDim.resourceStrings;
        dim.memberFunction = dateDim.memberFunction;
        let currDim = dim;
        let originDim = dateDim;
        while (currDim.childLevel) {
            currDim = currDim.childLevel;
            originDim = originDim.childLevel;
            currDim.memberFunction = originDim.memberFunction;
        }
    }
    /**
     * Returns if this is a IgxPivotDateDimension.
     */
    isDateDimension(dim) {
        return dim.inBaseDimension;
    }
    /**
     * This method restores complex objects in the pivot values.
     * Like the default aggregator methods.
     */
    restoreValues(config, grid) {
        // restore aggregator func if it matches the default aggregators key and label
        const values = config.values;
        for (const value of values) {
            const aggregateList = value.aggregateList;
            const aggregators = PivotUtil.getAggregatorsForValue(value, grid);
            value.aggregate.aggregator = aggregators.find(x => x.key === value.aggregate.key && x.label === value.aggregate.label)?.aggregator;
            if (aggregateList) {
                for (const ag of aggregateList) {
                    ag.aggregator = aggregators.find(x => x.key === ag.key && x.label === ag.label)?.aggregator;
                }
            }
        }
    }
    /**
     * This method builds a FilteringExpressionsTree from a provided object.
     */
    createExpressionsTreeFromObject(exprTreeObject) {
        if (!exprTreeObject || !exprTreeObject.filteringOperands) {
            return null;
        }
        const expressionsTree = new FilteringExpressionsTree(exprTreeObject.operator, exprTreeObject.fieldName);
        for (const item of exprTreeObject.filteringOperands) {
            // Check if item is an expressions tree or a single expression.
            if (item.filteringOperands) {
                const subTree = this.createExpressionsTreeFromObject(item);
                expressionsTree.filteringOperands.push(subTree);
            }
            else {
                const expr = item;
                let dataType;
                if (this.currGrid instanceof IgxPivotGridComponent) {
                    dataType = this.currGrid.allDimensions.find(x => x.memberName === expr.fieldName).dataType;
                }
                else if (this.currGrid.columns.length > 0) {
                    dataType = this.currGrid.columns.find(c => c.field === expr.fieldName).dataType;
                }
                else if (this.state.columns) {
                    dataType = this.state.columns.find(c => c.field === expr.fieldName).dataType;
                }
                else {
                    return null;
                }
                // when ESF, values are stored in Set.
                // First those values are converted to an array before returning string in the stringifyCallback
                // now we need to convert those back to Set
                if (Array.isArray(expr.searchVal)) {
                    expr.searchVal = new Set(expr.searchVal);
                }
                else {
                    expr.searchVal = expr.searchVal && (dataType === 'date' || dataType === 'dateTime') ? new Date(Date.parse(expr.searchVal)) : expr.searchVal;
                }
                let condition = this.generateFilteringCondition(dataType, expr.condition.name) ||
                    this.currGrid.columns.find(c => c.field === expr.fieldName).filters.condition(expr.condition.name);
                if (condition) {
                    expr.condition = condition;
                    expressionsTree.filteringOperands.push(expr);
                }
            }
        }
        return expressionsTree;
    }
    /**
     * Returns the filtering logic function for a given dataType and condition (contains, greaterThan, etc.)
     */
    generateFilteringCondition(dataType, name) {
        let filters;
        switch (dataType) {
            case GridColumnDataType.Boolean:
                filters = IgxBooleanFilteringOperand.instance();
                break;
            case GridColumnDataType.Number:
                filters = IgxNumberFilteringOperand.instance();
                break;
            case GridColumnDataType.Date:
                filters = IgxDateFilteringOperand.instance();
                break;
            case GridColumnDataType.DateTime:
                filters = IgxDateTimeFilteringOperand.instance();
                break;
            case GridColumnDataType.String:
            default:
                filters = IgxStringFilteringOperand.instance();
                break;
        }
        return filters.condition(name);
    }
    stringifyCallback(key, val) {
        if (key === 'searchVal' && val instanceof Set) {
            return Array.from(val);
        }
        return val;
    }
    getFeature(key) {
        const feature = this.FEATURES[key];
        return feature;
    }
}
IgxGridStateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridStateDirective, deps: [{ token: IGX_GRID_BASE, host: true, optional: true }, { token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
IgxGridStateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.0", type: IgxGridStateDirective, selector: "[igxGridState]", inputs: { options: ["igxGridState", "options"] }, outputs: { stateParsed: "stateParsed" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridStateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxGridState]'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Host
                }, {
                    type: Optional
                }, {
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }]; }, propDecorators: { stateParsed: [{
                type: Output
            }], options: [{
                type: Input,
                args: ['igxGridState']
            }] } });
/**
 * @hidden
 */
export class IgxGridStateModule {
}
IgxGridStateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IgxGridStateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridStateModule, declarations: [IgxGridStateDirective], exports: [IgxGridStateDirective] });
IgxGridStateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridStateModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridStateModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IgxGridStateDirective],
                    exports: [IgxGridStateDirective]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
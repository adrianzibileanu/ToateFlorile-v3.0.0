import { Injectable } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { resolveNestedPath } from '../../core/utils';
import * as i0 from "@angular/core";
export class IgxGridValidationService {
    constructor() {
        this._validityStates = new Map();
        this._valid = true;
    }
    /** Gets whether state is valid.
    */
    get valid() {
        return this._valid;
    }
    /**
     * @hidden
     * @internal
     */
    create(rowId, data) {
        let formGroup = this.getFormGroup(rowId);
        if (!formGroup) {
            formGroup = new FormGroup({});
            for (const col of this.grid.columns) {
                const value = resolveNestedPath(data || {}, col.field);
                const field = this.getFieldKey(col.field);
                const control = new FormControl(value, { updateOn: this.grid.validationTrigger });
                control.setValue(value);
                control.addValidators(col.validators);
                formGroup.addControl(field, control);
            }
            const args = {
                formGroup,
                owner: this.grid
            };
            this.grid.formGroupCreated.emit(args);
            this.add(rowId, formGroup);
        }
        else {
            // reset to pristine.
            for (const col of this.grid.columns) {
                const formControl = formGroup.get(col.field);
                if (formControl) {
                    formControl.markAsPristine();
                }
            }
        }
        return formGroup;
    }
    /**
     * @hidden
     * @internal
     */
    getFieldKey(path) {
        const parts = path?.split('.') ?? [];
        return parts.join('_');
    }
    /**
     * @hidden
     * @internal
     */
    getFormGroup(id) {
        return this._validityStates.get(id);
    }
    /**
     * @hidden
     * @internal
     */
    getFormControl(rowId, columnKey) {
        const formControl = this.getFormGroup(rowId);
        const field = this.getFieldKey(columnKey);
        return formControl?.get(field);
    }
    /**
     * @hidden
     * @internal
     */
    add(rowId, form) {
        this._validityStates.set(rowId, form);
    }
    /**
     * @hidden
     * @internal
     */
    getValidity() {
        const states = [];
        this._validityStates.forEach((formGroup, key) => {
            const state = [];
            for (const col of this.grid.columns) {
                const colKey = this.getFieldKey(col.field);
                const control = formGroup.get(colKey);
                if (control) {
                    state.push({ field: colKey, status: control.status, errors: control.errors });
                }
            }
            states.push({ key: key, status: formGroup.status, fields: state, errors: formGroup.errors });
        });
        return states;
    }
    /**
     * Returns all invalid record states.
     */
    getInvalid() {
        const validity = this.getValidity();
        return validity.filter(x => x.status === 'INVALID');
    }
    /**
     * @hidden
     * @internal
     */
    update(rowId, rowData) {
        if (!rowData)
            return;
        const keys = Object.keys(rowData);
        const rowGroup = this.getFormGroup(rowId);
        for (const key of keys) {
            const colKey = this.getFieldKey(key);
            const control = rowGroup?.get(colKey);
            if (control) {
                control.setValue(rowData[key], { emitEvent: false });
            }
        }
        this.updateStatus();
    }
    /** Marks the associated record or field as touched.
     * @param key The id of the record that will be marked as touched.
     * @param field Optional. The field from the record that will be marked as touched. If not provided all fields will be touched.
    */
    markAsTouched(key, field) {
        const rowGroup = this.getFormGroup(key);
        if (!rowGroup)
            return;
        rowGroup.markAsTouched();
        const fields = field ? [field] : this.grid.columns.map(x => x.field);
        for (const currField of fields) {
            const colKey = this.getFieldKey(currField);
            rowGroup?.get(colKey)?.markAsTouched();
        }
    }
    /**
     * @hidden
     * @internal
     */
    updateStatus() {
        const currentValid = this.valid;
        this._valid = this.getInvalid().length === 0;
        if (this.valid !== currentValid) {
            this.grid.validationStatusChange.emit({ status: this.valid ? 'VALID' : 'INVALID', owner: this.grid });
        }
    }
    /** Clears validation state by key or all states if none is provided.
     * @param key Optional. The key of the record for which to clear state.
    */
    clear(key) {
        if (key !== undefined) {
            this._validityStates.delete(key);
        }
        else {
            this._validityStates.clear();
        }
        this.updateStatus();
    }
}
IgxGridValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridValidationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
IgxGridValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridValidationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridValidationService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,
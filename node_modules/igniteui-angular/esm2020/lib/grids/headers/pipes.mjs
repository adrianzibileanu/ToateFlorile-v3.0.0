import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class SortingIndexPipe {
    transform(columnField, sortingExpressions) {
        let sortIndex = sortingExpressions.findIndex(expression => expression.fieldName === columnField);
        return sortIndex !== -1 ? ++sortIndex : null;
    }
}
SortingIndexPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: SortingIndexPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
SortingIndexPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: SortingIndexPipe, name: "sortingIndex" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: SortingIndexPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'sortingIndex' }]
        }] });
export class IgxHeaderGroupWidthPipe {
    transform(width, minWidth, hasLayout) {
        const isFitContent = width === 'fit-content';
        const isPercentage = typeof width === 'string' && width.indexOf('%') !== -1;
        return hasLayout ? '' : isFitContent || isPercentage ? width : `${Math.max(parseFloat(width), minWidth)}px`;
    }
}
IgxHeaderGroupWidthPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxHeaderGroupWidthPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxHeaderGroupWidthPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxHeaderGroupWidthPipe, name: "igxHeaderGroupWidth" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxHeaderGroupWidthPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'igxHeaderGroupWidth' }]
        }] });
export class IgxHeaderGroupStylePipe {
    transform(styles, column, _) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const res = styles[prop];
            css[prop] = typeof res === 'function' ? res(column) : res;
        }
        return css;
    }
}
IgxHeaderGroupStylePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxHeaderGroupStylePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxHeaderGroupStylePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxHeaderGroupStylePipe, name: "igxHeaderGroupStyle" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxHeaderGroupStylePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'igxHeaderGroupStyle' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvaGVhZGVycy9waXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFNcEQsTUFBTSxPQUFPLGdCQUFnQjtJQUNsQixTQUFTLENBQUMsV0FBbUIsRUFBRSxrQkFBd0M7UUFDMUUsSUFBSSxTQUFTLEdBQUcsa0JBQWtCLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsS0FBSyxXQUFXLENBQUMsQ0FBQztRQUNqRyxPQUFPLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNqRCxDQUFDOzs2R0FKUSxnQkFBZ0I7MkdBQWhCLGdCQUFnQjsyRkFBaEIsZ0JBQWdCO2tCQUQ1QixJQUFJO21CQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTs7QUFTOUIsTUFBTSxPQUFPLHVCQUF1QjtJQUV6QixTQUFTLENBQUMsS0FBVSxFQUFFLFFBQWEsRUFBRSxTQUFrQjtRQUMxRCxNQUFNLFlBQVksR0FBRyxLQUFLLEtBQUssYUFBYSxDQUFDO1FBQzdDLE1BQU0sWUFBWSxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ2hILENBQUM7O29IQU5RLHVCQUF1QjtrSEFBdkIsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBRG5DLElBQUk7bUJBQUMsRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUU7O0FBWXJDLE1BQU0sT0FBTyx1QkFBdUI7SUFFekIsU0FBUyxDQUFDLE1BQStCLEVBQUUsTUFBa0IsRUFBRSxDQUFTO1FBQzNFLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPLEdBQUcsQ0FBQztTQUNkO1FBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxHQUFHLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUM3RDtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7b0hBZlEsdUJBQXVCO2tIQUF2Qix1QkFBdUI7MkZBQXZCLHVCQUF1QjtrQkFEbkMsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElTb3J0aW5nRXhwcmVzc2lvbiB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9zb3J0aW5nLXN0cmF0ZWd5JztcbmltcG9ydCB7IENvbHVtblR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuXG5cbkBQaXBlKHsgbmFtZTogJ3NvcnRpbmdJbmRleCcgfSlcbmV4cG9ydCBjbGFzcyBTb3J0aW5nSW5kZXhQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHVibGljIHRyYW5zZm9ybShjb2x1bW5GaWVsZDogc3RyaW5nLCBzb3J0aW5nRXhwcmVzc2lvbnM6IElTb3J0aW5nRXhwcmVzc2lvbltdKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHNvcnRJbmRleCA9IHNvcnRpbmdFeHByZXNzaW9ucy5maW5kSW5kZXgoZXhwcmVzc2lvbiA9PiBleHByZXNzaW9uLmZpZWxkTmFtZSA9PT0gY29sdW1uRmllbGQpO1xuICAgICAgICByZXR1cm4gc29ydEluZGV4ICE9PSAtMSA/ICsrc29ydEluZGV4IDogbnVsbDtcbiAgICB9XG59XG5cbkBQaXBlKHsgbmFtZTogJ2lneEhlYWRlckdyb3VwV2lkdGgnIH0pXG5leHBvcnQgY2xhc3MgSWd4SGVhZGVyR3JvdXBXaWR0aFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHB1YmxpYyB0cmFuc2Zvcm0od2lkdGg6IGFueSwgbWluV2lkdGg6IGFueSwgaGFzTGF5b3V0OiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IGlzRml0Q29udGVudCA9IHdpZHRoID09PSAnZml0LWNvbnRlbnQnO1xuICAgICAgICBjb25zdCBpc1BlcmNlbnRhZ2UgPSB0eXBlb2Ygd2lkdGggPT09ICdzdHJpbmcnICYmIHdpZHRoLmluZGV4T2YoJyUnKSAhPT0gLTE7XG4gICAgICAgIHJldHVybiBoYXNMYXlvdXQgPyAnJyA6IGlzRml0Q29udGVudCB8fCBpc1BlcmNlbnRhZ2UgPyB3aWR0aCA6IGAke01hdGgubWF4KHBhcnNlRmxvYXQod2lkdGgpLCBtaW5XaWR0aCl9cHhgO1xuICAgIH1cbn1cblxuXG5AUGlwZSh7IG5hbWU6ICdpZ3hIZWFkZXJHcm91cFN0eWxlJyB9KVxuZXhwb3J0IGNsYXNzIElneEhlYWRlckdyb3VwU3R5bGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgICBwdWJsaWMgdHJhbnNmb3JtKHN0eWxlczogeyBbcHJvcDogc3RyaW5nXTogYW55IH0sIGNvbHVtbjogQ29sdW1uVHlwZSwgXzogbnVtYmVyKTogeyBbcHJvcDogc3RyaW5nXTogYW55IH0ge1xuICAgICAgICBjb25zdCBjc3MgPSB7fTtcblxuICAgICAgICBpZiAoIXN0eWxlcykge1xuICAgICAgICAgICAgcmV0dXJuIGNzcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyhzdHlsZXMpKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBzdHlsZXNbcHJvcF07XG4gICAgICAgICAgICBjc3NbcHJvcF0gPSB0eXBlb2YgcmVzID09PSAnZnVuY3Rpb24nID8gcmVzKGNvbHVtbikgOiByZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3NzO1xuICAgIH1cbn1cbiJdfQ==
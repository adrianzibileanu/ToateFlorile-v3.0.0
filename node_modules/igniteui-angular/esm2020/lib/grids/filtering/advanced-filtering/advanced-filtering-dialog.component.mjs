import { Component, Input, ViewChild, HostBinding } from '@angular/core';
import { Subject } from 'rxjs';
import { IgxQueryBuilderComponent } from '../../../query-builder/query-builder.component';
import { CurrentResourceStrings } from '../../../core/i18n/resources';
import { GridResourceStringsEN } from '../../../core/i18n/grid-resources';
import * as i0 from "@angular/core";
import * as i1 from "../../../core/utils";
import * as i2 from "@angular/common";
import * as i3 from "../../../directives/button/button.directive";
import * as i4 from "../../../directives/drag-drop/drag-drop.directive";
import * as i5 from "../../../query-builder/query-builder.component";
import * as i6 from "../../../query-builder/query-builder-header.component";
/**
 * A component used for presenting advanced filtering UI for a Grid.
 * It is used internally in the Grid, but could also be hosted in a container outside of it.
 *
 * Example:
 * ```html
 * <igx-advanced-filtering-dialog
 *     [grid]="grid1">
 * </igx-advanced-filtering-dialog>
 * ```
 */
export class IgxAdvancedFilteringDialogComponent {
    constructor(cdr, platform) {
        this.cdr = cdr;
        this.platform = platform;
        /**
         * @hidden @internal
         */
        this.display = 'block';
        /**
         * @hidden @internal
         */
        this.inline = true;
        /**
         * @hidden @internal
         */
        this.lastActiveNode = {};
        this.destroy$ = new Subject();
    }
    /**
     * @hidden @internal
     */
    ngAfterViewInit() {
        this.queryBuilder.setPickerOutlet(this.grid.outlet);
    }
    /**
     * @hidden @internal
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden @internal
     */
    get displayDensity() {
        return this.grid.displayDensity;
    }
    /**
     * An @Input property that sets the grid.
     */
    set grid(grid) {
        this._grid = grid;
        if (this._grid) {
            this._grid.filteringService.registerSVGIcons();
        }
        this.assignResourceStrings();
    }
    /**
     * Returns the grid.
     */
    get grid() {
        return this._grid;
    }
    /**
     * @hidden @internal
     */
    get filterableFields() {
        return this.grid.columns.filter((column) => !column.columnGroup && column.filterable);
    }
    /**
     * @hidden @internal
     */
    dragStart(dragArgs) {
        if (!this._overlayComponentId) {
            dragArgs.cancel = true;
            return;
        }
    }
    /**
     * @hidden @internal
     */
    onDragMove(e) {
        const deltaX = e.nextPageX - e.pageX;
        const deltaY = e.nextPageY - e.pageY;
        e.cancel = true;
        this._overlayService.setOffset(this._overlayComponentId, deltaX, deltaY);
    }
    /**
     * @hidden @internal
     */
    onKeyDown(eventArgs) {
        eventArgs.stopPropagation();
        const key = eventArgs.key;
        if (this.queryBuilder.isContextMenuVisible && (key === this.platform.KEYMAP.ESCAPE)) {
            this.queryBuilder.clearSelection();
        }
        else if (key === this.platform.KEYMAP.ESCAPE) {
            this.closeDialog();
        }
    }
    /**
     * @hidden @internal
     */
    initialize(grid, overlayService, overlayComponentId) {
        this.inline = false;
        this.grid = grid;
        this._overlayService = overlayService;
        this._overlayComponentId = overlayComponentId;
    }
    /**
     * @hidden @internal
     */
    onClearButtonClick(event) {
        this.grid.crudService.endEdit(false, event);
        this.queryBuilder.expressionTree = this.grid.advancedFilteringExpressionsTree = null;
    }
    /**
     * @hidden @internal
     */
    closeDialog() {
        if (this._overlayComponentId) {
            this._overlayService.hide(this._overlayComponentId);
        }
        this.grid.navigation.activeNode = this.lastActiveNode;
        if (this.grid.navigation.activeNode && this.grid.navigation.activeNode.row === -1) {
            this.grid.theadRow.nativeElement.focus();
        }
    }
    /**
     * @hidden @internal
     */
    applyChanges(event) {
        this.grid.crudService.endEdit(false, event);
        this.queryBuilder.exitOperandEdit();
        this.grid.advancedFilteringExpressionsTree = this.queryBuilder.expressionTree;
    }
    /**
     * @hidden @internal
     */
    cancelChanges() {
        this.closeDialog();
    }
    /**
     * @hidden @internal
     */
    onApplyButtonClick(event) {
        this.applyChanges(event);
        this.closeDialog();
    }
    assignResourceStrings() {
        // If grid has custom resource strings set for the advanced filtering,
        // they are passed to the query builder resource strings.
        const gridRS = this.grid.resourceStrings;
        if (gridRS !== GridResourceStringsEN) {
            const queryBuilderRS = CurrentResourceStrings.QueryBuilderResStrings;
            Object.keys(gridRS).forEach((prop) => {
                const reg = /^igx_grid_(advanced_)?filter_(row_)?/;
                if (!reg.test(prop)) {
                    return;
                }
                const affix = prop.replace(reg, '');
                const filterProp = `igx_query_builder_filter_${affix}`;
                const generalProp = `igx_query_builder_${affix}`;
                if (queryBuilderRS[filterProp] !== undefined) {
                    queryBuilderRS[filterProp] = gridRS[prop];
                }
                else if (queryBuilderRS[generalProp] !== undefined) {
                    queryBuilderRS[generalProp] = gridRS[prop];
                }
            });
        }
    }
}
IgxAdvancedFilteringDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxAdvancedFilteringDialogComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Component });
IgxAdvancedFilteringDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.0", type: IgxAdvancedFilteringDialogComponent, selector: "igx-advanced-filtering-dialog", inputs: { grid: "grid" }, host: { properties: { "style.display": "this.display" } }, viewQueries: [{ propertyName: "queryBuilder", first: true, predicate: ["queryBuilder"], descendants: true, read: IgxQueryBuilderComponent }], ngImport: i0, template: "<article *ngIf=\"grid\" class=\"igx-advanced-filter\" igxDrag [ghost]=\"false\" [dragTolerance]=\"0\"\n    (dragStart)=\"dragStart($event)\" (dragMove)=\"onDragMove($event)\" (keydown)=\"onKeyDown($event)\"\n    [ngClass]=\"{\n        'igx-advanced-filter--cosy': grid.displayDensity === 'cosy',\n        'igx-advanced-filter--compact': grid.displayDensity === 'compact',\n        'igx-advanced-filter--inline': inline\n    }\">\n    <igx-query-builder #queryBuilder [locale]=\"grid.locale\"\n        [fields]=\"this.filterableFields\"\n        [expressionTree]=\"this.grid.advancedFilteringExpressionsTree\">\n        <igx-query-builder-header\n            [title]=\"grid.resourceStrings.igx_grid_advanced_filter_title\"\n            igxDragHandle>\n        </igx-query-builder-header>\n    </igx-query-builder>\n\n    <footer class=\"igx-excel-filter__secondary-footer\">\n        <div class=\"igx-excel-filter__clear\">\n            <button igxButton=\"flat\" type=\"button\" [displayDensity]=\"displayDensity\"\n                (click)=\"onClearButtonClick($event)\">\n                {{ grid.resourceStrings.igx_grid_excel_custom_dialog_clear }}\n            </button>\n        </div>\n        <div class=\"igx-excel-filter__cancel\">\n            <button igxButton=\"flat\" type=\"button\" [displayDensity]=\"displayDensity\" (click)=\"cancelChanges()\">\n                {{ grid.resourceStrings.igx_grid_excel_cancel }}\n            </button>\n        </div>\n        <div class=\"igx-excel-filter__apply\">\n            <button igxButton=\"raised\" type=\"button\" [displayDensity]=\"displayDensity\"\n                (click)=\"onApplyButtonClick($event)\">\n                {{ grid.resourceStrings.igx_grid_excel_apply }}\n            </button>\n        </div>\n    </footer>\n</article>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "directive", type: i4.IgxDragDirective, selector: "[igxDrag]", inputs: ["igxDrag", "dragTolerance", "dragDirection", "dragChannel", "ghost", "ghostClass", "ghostTemplate", "ghostHost", "scrollContainer", "ghostOffsetX", "ghostOffsetY"], outputs: ["dragStart", "dragMove", "dragEnd", "dragClick", "ghostCreate", "ghostDestroy", "transitioned"], exportAs: ["drag"] }, { kind: "directive", type: i4.IgxDragHandleDirective, selector: "[igxDragHandle]" }, { kind: "component", type: i5.IgxQueryBuilderComponent, selector: "igx-query-builder", inputs: ["fields", "expressionTree", "locale", "resourceStrings"], outputs: ["expressionTreeChange"] }, { kind: "component", type: i6.IgxQueryBuilderHeaderComponent, selector: "igx-query-builder-header", inputs: ["title", "showLegend", "resourceStrings"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxAdvancedFilteringDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-advanced-filtering-dialog', template: "<article *ngIf=\"grid\" class=\"igx-advanced-filter\" igxDrag [ghost]=\"false\" [dragTolerance]=\"0\"\n    (dragStart)=\"dragStart($event)\" (dragMove)=\"onDragMove($event)\" (keydown)=\"onKeyDown($event)\"\n    [ngClass]=\"{\n        'igx-advanced-filter--cosy': grid.displayDensity === 'cosy',\n        'igx-advanced-filter--compact': grid.displayDensity === 'compact',\n        'igx-advanced-filter--inline': inline\n    }\">\n    <igx-query-builder #queryBuilder [locale]=\"grid.locale\"\n        [fields]=\"this.filterableFields\"\n        [expressionTree]=\"this.grid.advancedFilteringExpressionsTree\">\n        <igx-query-builder-header\n            [title]=\"grid.resourceStrings.igx_grid_advanced_filter_title\"\n            igxDragHandle>\n        </igx-query-builder-header>\n    </igx-query-builder>\n\n    <footer class=\"igx-excel-filter__secondary-footer\">\n        <div class=\"igx-excel-filter__clear\">\n            <button igxButton=\"flat\" type=\"button\" [displayDensity]=\"displayDensity\"\n                (click)=\"onClearButtonClick($event)\">\n                {{ grid.resourceStrings.igx_grid_excel_custom_dialog_clear }}\n            </button>\n        </div>\n        <div class=\"igx-excel-filter__cancel\">\n            <button igxButton=\"flat\" type=\"button\" [displayDensity]=\"displayDensity\" (click)=\"cancelChanges()\">\n                {{ grid.resourceStrings.igx_grid_excel_cancel }}\n            </button>\n        </div>\n        <div class=\"igx-excel-filter__apply\">\n            <button igxButton=\"raised\" type=\"button\" [displayDensity]=\"displayDensity\"\n                (click)=\"onApplyButtonClick($event)\">\n                {{ grid.resourceStrings.igx_grid_excel_apply }}\n            </button>\n        </div>\n    </footer>\n</article>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.PlatformUtil }]; }, propDecorators: { queryBuilder: [{
                type: ViewChild,
                args: ['queryBuilder', { read: IgxQueryBuilderComponent }]
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }], grid: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
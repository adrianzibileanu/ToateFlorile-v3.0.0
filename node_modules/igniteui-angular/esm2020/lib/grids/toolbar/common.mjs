import { Component, Directive, HostBinding } from '@angular/core';
import * as i0 from "@angular/core";
// eslint-disable-next-line @angular-eslint/directive-selector
export class IgxExcelTextDirective {
}
IgxExcelTextDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxExcelTextDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
IgxExcelTextDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.0", type: IgxExcelTextDirective, selector: "[excelText],excel-text", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxExcelTextDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[excelText],excel-text' }]
        }] });
// eslint-disable-next-line @angular-eslint/directive-selector
export class IgxCSVTextDirective {
}
IgxCSVTextDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxCSVTextDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
IgxCSVTextDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.0", type: IgxCSVTextDirective, selector: "[csvText],csv-text", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxCSVTextDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[csvText],csv-text' }]
        }] });
/**
 * Provides a way to template the title portion of the toolbar in the grid.
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 * @example
 * ```html
 * <igx-grid-toolbar-title>My custom title</igx-grid-toolbar-title>
 * ```
 */
export class IgxGridToolbarTitleComponent {
    constructor() {
        /**
         * Host `class.igx-grid-toolbar__title` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-grid-toolbar__title';
    }
}
IgxGridToolbarTitleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridToolbarTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IgxGridToolbarTitleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.0", type: IgxGridToolbarTitleComponent, selector: "igx-grid-toolbar-title", host: { properties: { "class.igx-grid-toolbar__title": "this.cssClass" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridToolbarTitleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-toolbar-title', template: '<ng-content></ng-content>' }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-grid-toolbar__title']
            }] } });
/**
 * Provides a way to template the action portion of the toolbar in the grid.
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 * @example
 * ```html
 * <igx-grid-toolbar-actions>
 *  <some-toolbar-action-here />
 * </igx-grid-toolbar-actions>
 * ```
 */
export class IgxGridToolbarActionsComponent {
    constructor() {
        /**
         * Host `class.igx-grid-toolbar__actions` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-grid-toolbar__actions';
    }
}
IgxGridToolbarActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridToolbarActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IgxGridToolbarActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.0", type: IgxGridToolbarActionsComponent, selector: "igx-grid-toolbar-actions", host: { properties: { "class.igx-grid-toolbar__actions": "this.cssClass" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridToolbarActionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-toolbar-actions', template: '<ng-content></ng-content>' }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-grid-toolbar__actions']
            }] } });
export class IgxGridToolbarDirective {
    constructor(template) {
        this.template = template;
    }
    static ngTemplateContextGuard(_dir, ctx) {
        return true;
    }
    ;
}
IgxGridToolbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridToolbarDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
IgxGridToolbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.0", type: IgxGridToolbarDirective, selector: "[igxGridToolbar]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridToolbarDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[igxGridToolbar]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBZSxNQUFNLGVBQWUsQ0FBQzs7QUFJL0UsOERBQThEO0FBRTlELE1BQU0sT0FBTyxxQkFBcUI7O2tIQUFyQixxQkFBcUI7c0dBQXJCLHFCQUFxQjsyRkFBckIscUJBQXFCO2tCQURqQyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFOztBQUlqRCw4REFBOEQ7QUFFOUQsTUFBTSxPQUFPLG1CQUFtQjs7Z0hBQW5CLG1CQUFtQjtvR0FBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBRC9CLFNBQVM7bUJBQUMsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUU7O0FBRzdDOzs7Ozs7Ozs7O0dBVUc7QUFFSCxNQUFNLE9BQU8sNEJBQTRCO0lBRHpDO1FBRUk7Ozs7O1dBS0c7UUFFSSxhQUFRLEdBQUcseUJBQXlCLENBQUM7S0FDL0M7O3lIQVRZLDRCQUE0Qjs2R0FBNUIsNEJBQTRCLDBJQURrQiwyQkFBMkI7MkZBQ3pFLDRCQUE0QjtrQkFEeEMsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUU7OEJBUzdFLFFBQVE7c0JBRGQsV0FBVzt1QkFBQywrQkFBK0I7O0FBSWhEOzs7Ozs7Ozs7Ozs7R0FZRztBQUVILE1BQU0sT0FBTyw4QkFBOEI7SUFEM0M7UUFFSTs7Ozs7V0FLRztRQUVJLGFBQVEsR0FBRywyQkFBMkIsQ0FBQztLQUNoRDs7MkhBVFcsOEJBQThCOytHQUE5Qiw4QkFBOEIsOElBRGtCLDJCQUEyQjsyRkFDM0UsOEJBQThCO2tCQUQxQyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRTs4QkFTL0UsUUFBUTtzQkFEZCxXQUFXO3VCQUFDLGlDQUFpQzs7QUFTbEQsTUFBTSxPQUFPLHVCQUF1QjtJQUNoQyxZQUFtQixRQUFvRDtRQUFwRCxhQUFRLEdBQVIsUUFBUSxDQUE0QztJQUFHLENBQUM7SUFFcEUsTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQTZCLEVBQzlELEdBQVk7UUFDWixPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7SUFBQSxDQUFDOztvSEFOTyx1QkFBdUI7d0dBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbZXhjZWxUZXh0XSxleGNlbC10ZXh0JyB9KVxuZXhwb3J0IGNsYXNzIElneEV4Y2VsVGV4dERpcmVjdGl2ZSB7IH1cblxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1zZWxlY3RvclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2NzdlRleHRdLGNzdi10ZXh0JyB9KVxuZXhwb3J0IGNsYXNzIElneENTVlRleHREaXJlY3RpdmUgeyB9XG5cbi8qKlxuICogUHJvdmlkZXMgYSB3YXkgdG8gdGVtcGxhdGUgdGhlIHRpdGxlIHBvcnRpb24gb2YgdGhlIHRvb2xiYXIgaW4gdGhlIGdyaWQuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hHcmlkVG9vbGJhck1vZHVsZVxuICogQGlneFBhcmVudCBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8aWd4LWdyaWQtdG9vbGJhci10aXRsZT5NeSBjdXN0b20gdGl0bGU8L2lneC1ncmlkLXRvb2xiYXItdGl0bGU+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7IHNlbGVjdG9yOiAnaWd4LWdyaWQtdG9vbGJhci10aXRsZScsIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicgfSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkVG9vbGJhclRpdGxlQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBIb3N0IGBjbGFzcy5pZ3gtZ3JpZC10b29sYmFyX190aXRsZWAgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1ncmlkLXRvb2xiYXJfX3RpdGxlJylcbiAgICBwdWJsaWMgY3NzQ2xhc3MgPSAnaWd4LWdyaWQtdG9vbGJhcl9fdGl0bGUnO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGEgd2F5IHRvIHRlbXBsYXRlIHRoZSBhY3Rpb24gcG9ydGlvbiBvZiB0aGUgdG9vbGJhciBpbiB0aGUgZ3JpZC5cbiAqXG4gKiBAaWd4TW9kdWxlIElneEdyaWRUb29sYmFyTW9kdWxlXG4gKiBAaWd4UGFyZW50IElneEdyaWRUb29sYmFyQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxpZ3gtZ3JpZC10b29sYmFyLWFjdGlvbnM+XG4gKiAgPHNvbWUtdG9vbGJhci1hY3Rpb24taGVyZSAvPlxuICogPC9pZ3gtZ3JpZC10b29sYmFyLWFjdGlvbnM+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7IHNlbGVjdG9yOiAnaWd4LWdyaWQtdG9vbGJhci1hY3Rpb25zJywgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyB9KVxuZXhwb3J0IGNsYXNzIElneEdyaWRUb29sYmFyQWN0aW9uc0NvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogSG9zdCBgY2xhc3MuaWd4LWdyaWQtdG9vbGJhcl9fYWN0aW9uc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1ncmlkLXRvb2xiYXJfX2FjdGlvbnMnKVxuICAgIHB1YmxpYyBjc3NDbGFzcyA9ICdpZ3gtZ3JpZC10b29sYmFyX19hY3Rpb25zJztcbiB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JpZFRvb2xiYXJUZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogR3JpZFR5cGU7XG59XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tpZ3hHcmlkVG9vbGJhcl0nfSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkVG9vbGJhckRpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJZ3hHcmlkVG9vbGJhclRlbXBsYXRlQ29udGV4dD4pIHt9XG5cbiAgICBwdWJsaWMgc3RhdGljIG5nVGVtcGxhdGVDb250ZXh0R3VhcmQoX2RpcjogSWd4R3JpZFRvb2xiYXJEaXJlY3RpdmUsXG4gICAgICAgIGN0eDogdW5rbm93bik6IGN0eCBpcyBJZ3hHcmlkVG9vbGJhclRlbXBsYXRlQ29udGV4dCB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfTtcbn1cbiJdfQ==
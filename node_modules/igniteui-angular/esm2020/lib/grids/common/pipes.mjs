import { __decorate } from "tslib";
import { Pipe, Inject } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray, resolveNestedPath } from '../../core/utils';
import { IGX_GRID_BASE } from './grid.interface';
import { IgxAddRow } from './crud.service';
import { IgxGridRow } from '../grid-public-row';
import * as i0 from "@angular/core";
/**
 * @hidden
 * @internal
 */
export class IgxGridCellStyleClassesPipe {
    transform(cssClasses, _, data, field, index, __) {
        if (!cssClasses) {
            return '';
        }
        const result = [];
        for (const cssClass of Object.keys(cssClasses)) {
            const callbackOrValue = cssClasses[cssClass];
            const apply = typeof callbackOrValue === 'function' ?
                callbackOrValue(data, field, resolveNestedPath(data, field), index) : callbackOrValue;
            if (apply) {
                result.push(cssClass);
            }
        }
        return result.join(' ');
    }
}
IgxGridCellStyleClassesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellStyleClassesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridCellStyleClassesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellStyleClassesPipe, name: "igxCellStyleClasses" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellStyleClassesPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'igxCellStyleClasses' }]
        }] });
/**
 * @hidden
 * @internal
 */
export class IgxGridCellStylesPipe {
    transform(styles, _, data, field, index, __) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const res = styles[prop];
            css[prop] = typeof res === 'function' ? res(data, field, resolveNestedPath(data, field), index) : res;
        }
        return css;
    }
}
IgxGridCellStylesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellStylesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridCellStylesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellStylesPipe, name: "igxCellStyles" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellStylesPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'igxCellStyles'
                }]
        }] });
/**
 * @hidden
 * @internal
 */
export class IgxGridCellImageAltPipe {
    transform(value) {
        if (value) {
            const val = value.split('/');
            const imagename = val[val.length - 1].split('.');
            return imagename.length ? imagename[0] : '';
        }
        return value;
    }
}
IgxGridCellImageAltPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellImageAltPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridCellImageAltPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellImageAltPipe, name: "igxCellImageAlt" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridCellImageAltPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'igxCellImageAlt'
                }]
        }] });
/**
 * @hidden
 * @internal
 */
export class IgxGridRowClassesPipe {
    constructor(grid) {
        this.grid = grid;
        this.row = new IgxGridRow(this.grid, -1, {});
    }
    transform(cssClasses, row, editMode, selected, dirty, deleted, dragging, index, mrl, filteredOut, _rowData, _) {
        const result = new Set(['igx-grid__tr', index % 2 ? row.grid.evenRowCSS : row.grid.oddRowCSS]);
        const mapping = [
            [selected, 'igx-grid__tr--selected'],
            [editMode, 'igx-grid__tr--edit'],
            [dirty, 'igx-grid__tr--edited'],
            [deleted, 'igx-grid__tr--deleted'],
            [dragging, 'igx-grid__tr--drag'],
            [mrl, 'igx-grid__tr--mrl'],
            // Tree grid only
            [filteredOut, 'igx-grid__tr--filtered']
        ];
        for (const [state, _class] of mapping) {
            if (state) {
                result.add(_class);
            }
        }
        for (const cssClass of Object.keys(cssClasses ?? {})) {
            const callbackOrValue = cssClasses[cssClass];
            this.row.index = index;
            this.row._data = row.data;
            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(this.row) : callbackOrValue;
            if (apply) {
                result.add(cssClass);
            }
        }
        return result;
    }
}
IgxGridRowClassesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowClassesPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridRowClassesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowClassesPipe, name: "igxGridRowClasses" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowClassesPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'igxGridRowClasses' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }]; } });
/**
 * @hidden
 * @internal
 */
export class IgxGridRowStylesPipe {
    constructor(grid) {
        this.grid = grid;
    }
    transform(styles, rowData, index, __) {
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            const cb = styles[prop];
            const data = this.grid.isTreeRow && this.grid.isTreeRow(rowData) ? rowData.data : rowData;
            const row = new IgxGridRow(this.grid, index, data);
            css[prop] = typeof cb === 'function' ? cb(row) : cb;
        }
        return css;
    }
}
IgxGridRowStylesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowStylesPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridRowStylesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowStylesPipe, name: "igxGridRowStyles" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowStylesPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'igxGridRowStyles' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }]; } });
/**
 * @hidden
 * @internal
 */
export class IgxGridNotGroupedPipe {
    transform(value) {
        return value.filter(item => !item.columnGroup);
    }
}
IgxGridNotGroupedPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridNotGroupedPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridNotGroupedPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridNotGroupedPipe, name: "igxNotGrouped" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridNotGroupedPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'igxNotGrouped'
                }]
        }] });
/**
 * @hidden
 * @internal
 */
export class IgxGridTopLevelColumns {
    transform(value) {
        return value.filter(item => item.level === 0);
    }
}
IgxGridTopLevelColumns.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTopLevelColumns, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridTopLevelColumns.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTopLevelColumns, name: "igxTopLevel" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTopLevelColumns, decorators: [{
            type: Pipe,
            args: [{
                    name: 'igxTopLevel'
                }]
        }] });
/**
 * @hidden
 * @internal
 */
export class IgxGridFilterConditionPipe {
    transform(value) {
        return value.split(/(?=[A-Z])/).join(' ');
    }
}
IgxGridFilterConditionPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridFilterConditionPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridFilterConditionPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridFilterConditionPipe, name: "filterCondition" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridFilterConditionPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'filterCondition',
                    pure: true
                }]
        }] });
/**
 * @hidden
 * @internal
 */
export class IgxGridTransactionPipe {
    constructor(grid) {
        this.grid = grid;
    }
    transform(collection, _id, _pipeTrigger) {
        if (this.grid.transactions.enabled) {
            const result = DataUtil.mergeTransactions(cloneArray(collection), this.grid.transactions.getAggregatedChanges(true), this.grid.primaryKey, this.grid.dataCloneStrategy);
            return result;
        }
        return collection;
    }
}
IgxGridTransactionPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTransactionPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridTransactionPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTransactionPipe, name: "gridTransaction" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTransactionPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'gridTransaction' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }]; } });
/**
 * @hidden
 * @internal
 */
export class IgxGridPaginatorOptionsPipe {
    transform(values) {
        return Array.from(new Set([...values])).sort((a, b) => a - b);
    }
}
IgxGridPaginatorOptionsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridPaginatorOptionsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridPaginatorOptionsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridPaginatorOptionsPipe, name: "paginatorOptions" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridPaginatorOptionsPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'paginatorOptions' }]
        }] });
/**
 * @hidden
 * @internal
 */
export class IgxHasVisibleColumnsPipe {
    transform(values, hasVisibleColumns) {
        if (!(values && values.length)) {
            return values;
        }
        return hasVisibleColumns ? values : [];
    }
}
IgxHasVisibleColumnsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxHasVisibleColumnsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxHasVisibleColumnsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxHasVisibleColumnsPipe, name: "visibleColumns" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxHasVisibleColumnsPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'visibleColumns' }]
        }] });
/** @hidden @internal */
function buildDataView() {
    return function (_target, _propertyKey, descriptor) {
        const original = descriptor.value;
        descriptor.value = function (...args) {
            const result = original.apply(this, args);
            this.grid.buildDataView();
            return result;
        };
        return descriptor;
    };
}
/**
 * @hidden
 */
export class IgxGridRowPinningPipe {
    constructor(grid) {
        this.grid = grid;
    }
    transform(collection, id, isPinned = false, _pipeTrigger) {
        if (this.grid.hasPinnedRecords && isPinned) {
            const result = collection.filter(rec => !this.grid.isSummaryRow(rec) && this.grid.isRecordPinned(rec));
            result.sort((rec1, rec2) => this.grid.getInitialPinnedIndex(rec1) - this.grid.getInitialPinnedIndex(rec2));
            return result;
        }
        this.grid.unpinnedRecords = collection;
        if (!this.grid.hasPinnedRecords) {
            this.grid.pinnedRecords = [];
            return isPinned ? [] : collection;
        }
        return collection.map((rec) => !this.grid.isSummaryRow(rec) &&
            this.grid.isRecordPinned(rec) ? { recordRef: rec, ghostRecord: true } : rec);
    }
}
IgxGridRowPinningPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowPinningPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridRowPinningPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowPinningPipe, name: "gridRowPinning" });
__decorate([
    buildDataView()
], IgxGridRowPinningPipe.prototype, "transform", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridRowPinningPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'gridRowPinning' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }]; }, propDecorators: { transform: [] } });
export class IgxGridDataMapperPipe {
    transform(data, field, _, val, isNestedPath) {
        return isNestedPath ? resolveNestedPath(data, field) : val;
    }
}
IgxGridDataMapperPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridDataMapperPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridDataMapperPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridDataMapperPipe, name: "dataMapper" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridDataMapperPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dataMapper' }]
        }] });
export class IgxStringReplacePipe {
    transform(value, search, replacement) {
        return value.replace(search, replacement);
    }
}
IgxStringReplacePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxStringReplacePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxStringReplacePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxStringReplacePipe, name: "igxStringReplace" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxStringReplacePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'igxStringReplace' }]
        }] });
export class IgxGridTransactionStatePipe {
    transform(row_id, field, rowEditable, transactions, _, __, ___) {
        if (rowEditable) {
            const rowCurrentState = transactions.getAggregatedValue(row_id, false);
            if (rowCurrentState) {
                const value = resolveNestedPath(rowCurrentState, field);
                return value !== undefined && value !== null;
            }
        }
        else {
            const transaction = transactions.getState(row_id);
            const value = resolveNestedPath(transaction?.value ?? {}, field);
            return transaction && transaction.value && (value || value === 0 || value === false);
        }
    }
}
IgxGridTransactionStatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTransactionStatePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridTransactionStatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTransactionStatePipe, name: "transactionState" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridTransactionStatePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'transactionState' }]
        }] });
export class IgxColumnFormatterPipe {
    transform(value, formatter, rowData, columnData) {
        return formatter(value, rowData, columnData);
    }
}
IgxColumnFormatterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxColumnFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxColumnFormatterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxColumnFormatterPipe, name: "columnFormatter" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxColumnFormatterPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'columnFormatter' }]
        }] });
export class IgxSummaryFormatterPipe {
    transform(summaryResult, summaryOperand, summaryFormatter) {
        return summaryFormatter(summaryResult, summaryOperand);
    }
}
IgxSummaryFormatterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxSummaryFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IgxSummaryFormatterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxSummaryFormatterPipe, name: "summaryFormatter" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxSummaryFormatterPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'summaryFormatter' }]
        }] });
export class IgxGridAddRowPipe {
    constructor(grid) {
        this.grid = grid;
    }
    transform(collection, isPinned = false, _pipeTrigger) {
        if (!this.grid.rowEditable || !this.grid.crudService.row || this.grid.crudService.row.getClassName() !== IgxAddRow.name ||
            !this.grid.crudService.addRowParent || isPinned !== this.grid.crudService.addRowParent.isPinned) {
            return collection;
        }
        const copy = collection.slice(0);
        const rec = this.grid.crudService.row.recordRef;
        copy.splice(this.grid.crudService.row.index, 0, rec);
        return copy;
    }
}
IgxGridAddRowPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridAddRowPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe });
IgxGridAddRowPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.0", ngImport: i0, type: IgxGridAddRowPipe, name: "gridAddRow" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.0", ngImport: i0, type: IgxGridAddRowPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'gridAddRow' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,